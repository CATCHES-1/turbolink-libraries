diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0e8fbdee8b..fc44bb9124 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -48,6 +48,7 @@ option(gRPC_BUILD_TESTS "Build tests" OFF)
 option(gRPC_BUILD_CODEGEN "Build codegen" ON)
 option(gRPC_BUILD_CSHARP_EXT "Build C# extensions" ON)
 option(gRPC_BACKWARDS_COMPATIBILITY_MODE "Build libraries that are binary compatible across a larger number of OS and libc versions" OFF)
+option(gRPC_USE_CARES "Use c-ares as DNS requests library" ON)
 
 set(gRPC_INSTALL_default ON)
 if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
@@ -254,10 +255,16 @@ if (gRPC_XDS_USER_AGENT_IS_CSHARP)
   add_definitions("-DGRPC_XDS_USER_AGENT_NAME_SUFFIX=\"csharp\"" "-DGRPC_XDS_USER_AGENT_VERSION_SUFFIX=\"2.41.0\"")
 endif()
 
+if (gRPC_USE_CARES)
+ add_definitions("-DGRPC_ARES=1")
+ include(cmake/cares.cmake)
+else()
+ add_definitions("-DGRPC_ARES=0")
+endif()
+
 include(cmake/abseil-cpp.cmake)
 include(cmake/address_sorting.cmake)
 include(cmake/benchmark.cmake)
-include(cmake/cares.cmake)
 include(cmake/protobuf.cmake)
 include(cmake/re2.cmake)
 include(cmake/ssl.cmake)
@@ -1063,8 +1070,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/address_sorting.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/address_sorting.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug 
     )
   endif()
 endif()
@@ -1212,8 +1220,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/end2end_nosec_tests.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/end2end_nosec_tests.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATION Debug
     )
   endif()
 endif()
@@ -1360,8 +1369,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/end2end_tests.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/end2end_tests.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -1456,8 +1466,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/gpr.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/gpr.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2133,8 +2144,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2686,8 +2698,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2890,8 +2903,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3137,8 +3151,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_alts.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_alts.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3199,8 +3214,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_error_details.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_error_details.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3266,8 +3282,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_reflection.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_reflection.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3539,8 +3556,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3790,8 +3808,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_plugin_support.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_plugin_support.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3859,8 +3878,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpcpp_channelz.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpcpp_channelz.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3934,8 +3954,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/upb.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3968,6 +3989,7 @@ if(gRPC_INSTALL)
 endif()
 
 
+if(gRPC_BUILD_CODEGEN)
 
 add_executable(check_epollexclusive
   test/build/check_epollexclusive.c
@@ -4020,7 +4042,7 @@ target_link_libraries(gen_hpack_tables
   grpc
   gpr
 )
-
+endif() #gRPC_BUILD_CODEGEN
 
 if(gRPC_BUILD_TESTS)
 
@@ -17646,7 +17668,7 @@ function(generate_pkgconfig name description version requires
     "${output_filepath}"
     @ONLY)
   install(FILES "${output_filepath}"
-    DESTINATION "lib/pkgconfig/")
+    DESTINATION "${gRPC_INSTALL_LIBDIR}/pkgconfig/")
 endfunction()
 
 # gpr .pc file
diff --git a/include/grpc/event_engine/port.h b/include/grpc/event_engine/port.h
index 942458646a..34479717fe 100644
--- a/include/grpc/event_engine/port.h
+++ b/include/grpc/event_engine/port.h
@@ -20,10 +20,12 @@
 #if defined(GPR_ANDROID) || defined(GPR_LINUX) || defined(GPR_APPLE) ||     \
     defined(GPR_FREEBSD) || defined(GPR_OPENBSD) || defined(GPR_SOLARIS) || \
     defined(GPR_AIX) || defined(GPR_NACL) || defined(GPR_FUCHSIA) ||        \
-    defined(GRPC_POSIX_SOCKET)
+    defined(GRPC_POSIX_SOCKET) || defined(GPR_PLAYSTATION)
 #define GRPC_EVENT_ENGINE_POSIX
 #include <arpa/inet.h>
+#if !defined(GPR_PLAYSTATION)
 #include <netdb.h>
+#endif
 #include <netinet/in.h>
 #include <sys/socket.h>
 #include <unistd.h>
diff --git a/include/grpc/impl/codegen/port_platform.h b/include/grpc/impl/codegen/port_platform.h
index 8b9831bae3..5eaa632278 100644
--- a/include/grpc/impl/codegen/port_platform.h
+++ b/include/grpc/impl/codegen/port_platform.h
@@ -250,6 +250,29 @@
 #else /* _LP64 */
 #define GPR_ARCH_32 1
 #endif /* _LP64 */
+#elif defined(__ORBIS__) || defined(__PROSPERO__)
+#define GPR_PLATFORM_STRING "playstation"
+#ifndef _BSD_SOURCE
+#define _BSD_SOURCE
+#endif
+#define GPR_PLAYSTATION 1
+#define GPR_CPU_POSIX 1
+#define GPR_GCC_ATOMIC 1
+#define GPR_POSIX_LOG 1
+#define GPR_POSIX_ENV 1
+#define GPR_POSIX_TMPFILE 1
+#define GPR_POSIX_STAT 1
+#define GPR_POSIX_STRING 1
+#define GPR_POSIX_SUBPROCESS 1
+#define GPR_POSIX_SYNC 1
+#define GPR_POSIX_TIME 1
+#define GPR_HAS_PTHREAD_H 1
+#define GPR_GETPID_IN_UNISTD_H 1
+//#define GPR_SUPPORT_CHANNELS_FROM_FD 1
+#define GPR_ARCH_64 1
+#include <net.h>
+#include <netinet/in.h>
+#include <netinet6/in6.h>
 #elif defined(__FreeBSD__)
 #define GPR_PLATFORM_STRING "freebsd"
 #ifndef _BSD_SOURCE
@@ -536,7 +559,7 @@ typedef unsigned __int64 uint64_t;
 #endif
 #endif /* GPR_PRINT_FORMAT_CHECK */
 
-#if GPR_FORBID_UNREACHABLE_CODE
+#ifdef GPR_FORBID_UNREACHABLE_CODE
 #define GPR_UNREACHABLE_CODE(STATEMENT)
 #else
 #define GPR_UNREACHABLE_CODE(STATEMENT)             \
diff --git a/src/core/lib/address_utils/parse_address.cc b/src/core/lib/address_utils/parse_address.cc
index a621514414..ae43df9dfb 100644
--- a/src/core/lib/address_utils/parse_address.cc
+++ b/src/core/lib/address_utils/parse_address.cc
@@ -27,8 +27,10 @@
 #endif
 #ifdef GRPC_POSIX_SOCKET
 #include <errno.h>
+#if !defined(GPR_PLAYSTATION)
 #include <net/if.h>
 #endif
+#endif
 
 #include "absl/strings/str_cat.h"
 #include "absl/strings/strip.h"
diff --git a/src/core/lib/gpr/cpu_posix.cc b/src/core/lib/gpr/cpu_posix.cc
index 982ccbd6ff..69a1aca9c5 100644
--- a/src/core/lib/gpr/cpu_posix.cc
+++ b/src/core/lib/gpr/cpu_posix.cc
@@ -36,11 +36,15 @@ static long ncpus = 0;
 static pthread_key_t thread_id_key;
 
 static void init_ncpus() {
+#if defined(GPR_PLAYSTATION)
+  ncpus = 16;
+#else
   ncpus = sysconf(_SC_NPROCESSORS_CONF);
   if (ncpus < 1 || ncpus > INT32_MAX) {
     gpr_log(GPR_ERROR, "Cannot determine number of CPUs: assuming 1");
     ncpus = 1;
   }
+#endif
 }
 
 unsigned gpr_cpu_num_cores(void) {
diff --git a/src/core/lib/gpr/env_posix.cc b/src/core/lib/gpr/env_posix.cc
index fb2a21c669..2930ebd71b 100644
--- a/src/core/lib/gpr/env_posix.cc
+++ b/src/core/lib/gpr/env_posix.cc
@@ -29,18 +29,30 @@
 #include "src/core/lib/gpr/string.h"
 
 char* gpr_getenv(const char* name) {
+#if defined(GPR_PLAYSTATION)
+  return nullptr;
+#else
   char* result = getenv(name);
   return result == nullptr ? result : gpr_strdup(result);
+#endif
 }
 
 void gpr_setenv(const char* name, const char* value) {
+#if defined(GPR_PLAYSTATION)
+  (void)0;
+#else
   int res = setenv(name, value, 1);
   GPR_ASSERT(res == 0);
+#endif
 }
 
 void gpr_unsetenv(const char* name) {
+#if defined(GPR_PLAYSTATION)
+  (void)0;
+#else
   int res = unsetenv(name);
   GPR_ASSERT(res == 0);
+#endif
 }
 
 #endif /* GPR_POSIX_ENV */
diff --git a/src/core/lib/gpr/log_posix.cc b/src/core/lib/gpr/log_posix.cc
index 2c28bddd75..3648ff8eef 100644
--- a/src/core/lib/gpr/log_posix.cc
+++ b/src/core/lib/gpr/log_posix.cc
@@ -84,7 +84,11 @@ void gpr_default_log(gpr_log_func_args* args) {
   else
     display_file = final_slash + 1;
 
+#if defined(GPR_PLAYSTATION)
+  if (!localtime_s(&timer, &tm)) {
+#else
   if (!localtime_r(&timer, &tm)) {
+#endif
     strcpy(time_buffer, "error:localtime");
   } else if (0 ==
              strftime(time_buffer, sizeof(time_buffer), "%m%d %H:%M:%S", &tm)) {
diff --git a/src/core/lib/gpr/tmpfile.h b/src/core/lib/gpr/tmpfile.h
index 3ce3ff5e5d..bbef708982 100644
--- a/src/core/lib/gpr/tmpfile.h
+++ b/src/core/lib/gpr/tmpfile.h
@@ -23,10 +23,12 @@
 
 #include <stdio.h>
 
+#if !defined(GPR_PLAYSTATION)
 /* Creates a temporary file from a prefix.
    If tmp_filename is not NULL, *tmp_filename is assigned the name of the
    created file and it is the responsibility of the caller to gpr_free it
    unless an error occurs in which case it will be set to NULL. */
 FILE* gpr_tmpfile(const char* prefix, char** tmp_filename);
+#endif
 
 #endif /* GRPC_CORE_LIB_GPR_TMPFILE_H */
diff --git a/src/core/lib/gpr/tmpfile_posix.cc b/src/core/lib/gpr/tmpfile_posix.cc
index 166cdf68f2..90d82d6211 100644
--- a/src/core/lib/gpr/tmpfile_posix.cc
+++ b/src/core/lib/gpr/tmpfile_posix.cc
@@ -32,6 +32,7 @@
 #include "src/core/lib/gpr/string.h"
 #include "src/core/lib/gpr/tmpfile.h"
 
+#if !defined(GPR_PLAYSTATION)
 FILE* gpr_tmpfile(const char* prefix, char** tmp_filename) {
   FILE* result = nullptr;
   char* filename_template;
@@ -65,5 +66,5 @@ end:
   }
   return result;
 }
-
+#endif
 #endif /* GPR_POSIX_TMPFILE */
diff --git a/src/core/lib/gprpp/thd_posix.cc b/src/core/lib/gprpp/thd_posix.cc
index 2d522c9b23..2fc6b70a11 100644
--- a/src/core/lib/gprpp/thd_posix.cc
+++ b/src/core/lib/gprpp/thd_posix.cc
@@ -52,14 +52,22 @@ struct thd_arg {
 size_t RoundUpToPageSize(size_t size) {
   // TODO(yunjiaw): Change this variable (page_size) to a function-level static
   // when possible
+#if defined(GPR_PLAYSTATION)
+  size_t page_size = static_cast<size_t>(SCE_KERNEL_PAGE_SIZE);
+#else
   size_t page_size = static_cast<size_t>(sysconf(_SC_PAGESIZE));
+#endif
   return (size + page_size - 1) & ~(page_size - 1);
 }
 
 // Returns the minimum valid stack size that can be passed to
 // pthread_attr_setstacksize.
 size_t MinValidStackSize(size_t request_size) {
+#if defined(GPR_PLAYSTATION)
+  size_t min_stacksize = SCE_PTHREAD_STACK_MIN;
+#else
   size_t min_stacksize = sysconf(_SC_THREAD_STACK_MIN);
+#endif
   if (request_size < min_stacksize) {
     request_size = min_stacksize;
   }
diff --git a/src/core/lib/iomgr/endpoint_pair_posix.cc b/src/core/lib/iomgr/endpoint_pair_posix.cc
index 217ea3770f..66d46e52e5 100644
--- a/src/core/lib/iomgr/endpoint_pair_posix.cc
+++ b/src/core/lib/iomgr/endpoint_pair_posix.cc
@@ -42,12 +42,9 @@
 #include "src/core/lib/iomgr/unix_sockets_posix.h"
 
 static void create_sockets(int sv[2]) {
-  int flags;
   grpc_create_socketpair_if_unix(sv);
-  flags = fcntl(sv[0], F_GETFL, 0);
-  GPR_ASSERT(fcntl(sv[0], F_SETFL, flags | O_NONBLOCK) == 0);
-  flags = fcntl(sv[1], F_GETFL, 0);
-  GPR_ASSERT(fcntl(sv[1], F_SETFL, flags | O_NONBLOCK) == 0);
+  GPR_ASSERT(grpc_set_socket_nonblocking(sv[0], 1) == GRPC_ERROR_NONE);
+  GPR_ASSERT(grpc_set_socket_nonblocking(sv[1], 1) == GRPC_ERROR_NONE);
   GPR_ASSERT(grpc_set_socket_no_sigpipe_if_possible(sv[0]) == GRPC_ERROR_NONE);
   GPR_ASSERT(grpc_set_socket_no_sigpipe_if_possible(sv[1]) == GRPC_ERROR_NONE);
 }
diff --git a/src/core/lib/iomgr/ev_epoll1_linux.cc b/src/core/lib/iomgr/ev_epoll1_linux.cc
index 91805634a5..e8e37d3ee1 100644
--- a/src/core/lib/iomgr/ev_epoll1_linux.cc
+++ b/src/core/lib/iomgr/ev_epoll1_linux.cc
@@ -29,10 +29,28 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
+#if !defined(GPR_PLAYSTATION)
 #include <poll.h>
+#endif
 #include <pthread.h>
 #include <string.h>
+#if defined(GPR_PLAYSTATION)
+#include <net.h>
+#define EPOLLIN       SCE_NET_EPOLLIN
+#define EPOLLOUT      SCE_NET_EPOLLOUT
+#define EPOLLERR      SCE_NET_EPOLLERR
+#define EPOLLHUP      SCE_NET_EPOLLHUP
+#define EPOLLET       0
+#define EPOLLPRI      0
+#define EPOLL_CTL_ADD SCE_NET_EPOLL_CTL_ADD
+#define EPOLL_CTL_DEL SCE_NET_EPOLL_CTL_DEL
+#define EPOLLDESCID   SCE_NET_EPOLLDESCID
+#define epoll_event   SceNetEpollEvent
+#define epoll_ctl     sceNetEpollControl
+#define epoll_wait    sceNetEpollWait
+#else
 #include <sys/epoll.h>
+#endif
 #include <sys/socket.h>
 #include <unistd.h>
 
@@ -100,12 +118,18 @@ static int epoll_create_and_cloexec() {
     gpr_log(GPR_ERROR, "epoll_create1 unavailable");
   }
 #else
+  #if defined(GPR_PLAYSTATION)
+  SceNetId fd = sceNetEpollCreate("turbolink", 0);
+  #else
   int fd = epoll_create(MAX_EPOLL_EVENTS);
+  #endif
   if (fd < 0) {
     gpr_log(GPR_ERROR, "epoll_create unavailable");
+  #if !defined(GPR_PLAYSTATION)
   } else if (fcntl(fd, F_SETFD, FD_CLOEXEC) != 0) {
     gpr_log(GPR_ERROR, "fcntl following epoll_create failed");
     return -1;
+  #endif
   }
 #endif
   return fd;
diff --git a/src/core/lib/iomgr/ev_posix.cc b/src/core/lib/iomgr/ev_posix.cc
index bae0f15ce0..1765843f36 100644
--- a/src/core/lib/iomgr/ev_posix.cc
+++ b/src/core/lib/iomgr/ev_posix.cc
@@ -61,6 +61,7 @@ grpc_core::DebugOnlyTraceFlag grpc_polling_api_trace(false, "polling_api");
 #define GRPC_POLLING_API_TRACE(...)
 #endif  // NDEBUG
 
+#if !defined(GPR_PLAYSTATION)
 /** Default poll() function - a pointer so that it can be overridden by some
  *  tests */
 #ifndef GPR_AIX
@@ -71,6 +72,7 @@ int aix_poll(struct pollfd fds[], nfds_t nfds, int timeout) {
 }
 grpc_poll_function_type grpc_poll_function = aix_poll;
 #endif  // GPR_AIX
+#endif
 
 grpc_wakeup_fd grpc_global_wakeup_fd;
 
@@ -84,6 +86,8 @@ struct event_engine_factory {
   const char* name;
   event_engine_factory_fn factory;
 };
+
+#if !defined(GPR_PLAYSTATION)
 namespace {
 
 grpc_poll_function_type real_poll_function;
@@ -110,6 +114,7 @@ const grpc_event_engine_vtable* init_non_polling(bool explicit_request) {
   return ret;
 }
 }  // namespace
+#endif
 
 #define ENGINE_HEAD_CUSTOM "head_custom"
 #define ENGINE_TAIL_CUSTOM "tail_custom"
@@ -128,8 +133,13 @@ const grpc_event_engine_vtable* init_non_polling(bool explicit_request) {
 static event_engine_factory g_factories[] = {
     {ENGINE_HEAD_CUSTOM, nullptr},        {ENGINE_HEAD_CUSTOM, nullptr},
     {ENGINE_HEAD_CUSTOM, nullptr},        {ENGINE_HEAD_CUSTOM, nullptr},
+#if defined(GPR_PLAYSTATION)
+    {ENGINE_HEAD_CUSTOM, nullptr},        {"epoll1", grpc_init_epoll1_linux},
+    {ENGINE_HEAD_CUSTOM, nullptr},        {ENGINE_HEAD_CUSTOM, nullptr},
+#else
     {"epollex", grpc_init_epollex_linux}, {"epoll1", grpc_init_epoll1_linux},
     {"poll", grpc_init_poll_posix},       {"none", init_non_polling},
+#endif
     {ENGINE_TAIL_CUSTOM, nullptr},        {ENGINE_TAIL_CUSTOM, nullptr},
     {ENGINE_TAIL_CUSTOM, nullptr},        {ENGINE_TAIL_CUSTOM, nullptr},
 };
diff --git a/src/core/lib/iomgr/ev_posix.h b/src/core/lib/iomgr/ev_posix.h
index 479921ae16..3ea9a02a3a 100644
--- a/src/core/lib/iomgr/ev_posix.h
+++ b/src/core/lib/iomgr/ev_posix.h
@@ -21,7 +21,9 @@
 
 #include <grpc/support/port_platform.h>
 
+#if !defined(GPR_PLAYSTATION)
 #include <poll.h>
+#endif
 
 #include "src/core/lib/debug/trace.h"
 #include "src/core/lib/gprpp/global_config.h"
@@ -200,8 +202,10 @@ bool grpc_add_closure_to_background_poller(grpc_closure* closure,
 /* Shut down all the closures registered in the background poller. */
 void grpc_shutdown_background_closure();
 
+#if !defined(GPR_PLAYSTATION)
 /* override to allow tests to hook poll() usage */
 typedef int (*grpc_poll_function_type)(struct pollfd*, nfds_t, int);
 extern grpc_poll_function_type grpc_poll_function;
+#endif
 
 #endif /* GRPC_CORE_LIB_IOMGR_EV_POSIX_H */
diff --git a/src/core/lib/iomgr/internal_errqueue.cc b/src/core/lib/iomgr/internal_errqueue.cc
index ac644b2f43..fdd56811f7 100644
--- a/src/core/lib/iomgr/internal_errqueue.cc
+++ b/src/core/lib/iomgr/internal_errqueue.cc
@@ -29,7 +29,9 @@
 #include <errno.h>
 #include <stdlib.h>
 #include <string.h>
+#if !defined(GPR_PLAYSTATION)
 #include <sys/utsname.h>
+#endif
 
 namespace grpc_core {
 static bool errqueue_supported = false;
diff --git a/src/core/lib/iomgr/port.h b/src/core/lib/iomgr/port.h
index 3e32429d41..c4faa67072 100644
--- a/src/core/lib/iomgr/port.h
+++ b/src/core/lib/iomgr/port.h
@@ -127,6 +127,13 @@
 #define GRPC_POSIX_SOCKETUTILS 1
 #define GRPC_POSIX_SYSCONF 1
 #define GRPC_POSIX_WAKEUP_FD 1
+#elif defined(GPR_PLAYSTATION)
+#define GRPC_HAVE_ARPA_NAMESER 1
+#define GRPC_POSIX_NO_SPECIAL_WAKEUP_FD 1
+#define GRPC_POSIX_SOCKET 1
+#define GRPC_POSIX_SOCKETUTILS 1
+#define GRPC_POSIX_WAKEUP_FD 1 
+#define GRPC_LINUX_EPOLL 1
 #elif defined(GPR_FREEBSD)
 #define GRPC_HAVE_ARPA_NAMESER 1
 #define GRPC_HAVE_IFADDRS 1
@@ -211,6 +218,13 @@
 #define GRPC_POSIX_SOCKET_UTILS_COMMON 1
 #endif
 
+#ifdef GPR_PLAYSTATION
+#undef GRPC_POSIX_SOCKET_EV_EPOLLEX
+#undef GRPC_POSIX_SOCKET_EV_POLL
+#undef GRPC_POSIX_SOCKET_EV_EPOLL1
+#undef GRPC_POSIX_SOCKET_IF_NAMETOINDEX
+#endif
+
 #if defined(GRPC_POSIX_HOST_NAME_MAX) && defined(GRPC_POSIX_SYSCONF)
 #error "Cannot define both GRPC_POSIX_HOST_NAME_MAX and GRPC_POSIX_SYSCONF"
 #endif
diff --git a/src/core/lib/iomgr/resolve_address_posix.cc b/src/core/lib/iomgr/resolve_address_posix.cc
index 32816fec0a..d68bee79d0 100644
--- a/src/core/lib/iomgr/resolve_address_posix.cc
+++ b/src/core/lib/iomgr/resolve_address_posix.cc
@@ -29,10 +29,13 @@
 #include <grpc/support/string_util.h>
 #include <grpc/support/time.h>
 
+#include "absl/strings/str_format.h"
+
 #include "src/core/lib/gpr/string.h"
 #include "src/core/lib/gpr/useful.h"
 #include "src/core/lib/gprpp/host_port.h"
 #include "src/core/lib/gprpp/thd.h"
+#include "src/core/lib/iomgr/executor.h"
 #include "src/core/lib/iomgr/block_annotate.h"
 #include "src/core/lib/iomgr/executor.h"
 #include "src/core/lib/iomgr/iomgr_internal.h"
@@ -40,14 +43,59 @@
 #include "src/core/lib/iomgr/sockaddr.h"
 #include "src/core/lib/iomgr/unix_sockets_posix.h"
 
+#if defined(GPR_PLAYSTATION)
+grpc_error_handle playstation_do_resolver_ntoa(const char* hostname, SceNetInAddr* addr) 
+{
+  SceNetId rid = -1;
+  int memid = -1;
+  int ret;
+  grpc_error_handle err = GRPC_ERROR_NONE;
+  
+  ret = sceNetPoolCreate(__FUNCTION__, 4 * 1024, 0);
+  if (ret < 0) {
+    err = GRPC_ERROR_CREATE_FROM_CPP_STRING(absl::StrFormat(
+        "sceNetPoolCreate() failed (0x%x errno=%d)", ret, sce_net_errno));
+    goto failed;
+  }
+  memid = ret;
+  ret = sceNetResolverCreate("resolver", memid, 0);
+  if (ret < 0) {
+    err = GRPC_ERROR_CREATE_FROM_CPP_STRING(absl::StrFormat(
+        "sceNetResolverCreate() failed (0x%x errno=%d)\n", ret, sce_net_errno));
+    goto failed;
+  }
+  rid = ret;
+  ret = sceNetResolverStartNtoa(rid, hostname, addr, 0, 0, 0);
+  if (ret < 0) {
+    err = GRPC_ERROR_CREATE_FROM_CPP_STRING(absl::StrFormat(
+        "sceNetResolverStartNtoa() failed (0x%x errno=%d)\n", ret, sce_net_errno));
+    goto failed;
+  }
+  ret = sceNetResolverDestroy(rid);
+  if (ret < 0) {
+    err = GRPC_ERROR_CREATE_FROM_CPP_STRING(absl::StrFormat(
+      "sceNetResolverDestroy() failed (0x%x errno=%d)\n", ret, sce_net_errno));
+    goto failed;
+  }
+  ret = sceNetPoolDestroy(memid);
+  if (ret < 0) {
+    err = GRPC_ERROR_CREATE_FROM_CPP_STRING(absl::StrFormat(
+      "sceNetPoolDestroy() failed (0x%x errno=%d)\n", ret, sce_net_errno));
+    goto failed;
+  }
+  return GRPC_ERROR_NONE;
+
+failed:
+  sceNetResolverDestroy(rid);
+  sceNetPoolDestroy(memid);
+  return err;
+}
+#endif
+
 static grpc_error_handle posix_blocking_resolve_address(
     const char* name, const char* default_port,
     grpc_resolved_addresses** addresses) {
   grpc_core::ExecCtx exec_ctx;
-  struct addrinfo hints;
-  struct addrinfo *result = nullptr, *resp;
-  int s;
-  size_t i;
   grpc_error_handle err;
 
   std::string host;
@@ -58,7 +106,7 @@ static grpc_error_handle posix_blocking_resolve_address(
     err = grpc_error_set_str(
         GRPC_ERROR_CREATE_FROM_STATIC_STRING("unparseable host:port"),
         GRPC_ERROR_STR_TARGET_ADDRESS, grpc_slice_from_copied_string(name));
-    goto done;
+    return err;
   }
 
   if (port.empty()) {
@@ -66,12 +114,50 @@ static grpc_error_handle posix_blocking_resolve_address(
       err = grpc_error_set_str(
           GRPC_ERROR_CREATE_FROM_STATIC_STRING("no port in name"),
           GRPC_ERROR_STR_TARGET_ADDRESS, grpc_slice_from_copied_string(name));
-      goto done;
+      return err;
     }
     port = default_port;
   }
+#if defined(GPR_PLAYSTATION)
+  SceNetInAddr sin_addr;
+  if (sceNetInetPton(SCE_NET_AF_INET, host.c_str(), &sin_addr) == 0) {
+    GRPC_SCHEDULING_START_BLOCKING_REGION;
+    err = playstation_do_resolver_ntoa(host.c_str(), &sin_addr);
+    GRPC_SCHEDULING_END_BLOCKING_REGION;
+    if (err != GRPC_ERROR_NONE) {
+      return err;
+    }
+  }
+  //parse port
+  char* endptr = nullptr;
+  int port_num = strtol(port.c_str(), &endptr, 10);
+  if (endptr == port.c_str()) {
+    if (port == "http") {
+      port_num = 80;
+    } else if (port == "https") {
+      port_num = 443;
+    }
+    else {
+      err = grpc_error_set_str(
+          GRPC_ERROR_CREATE_FROM_STATIC_STRING("invalid port in name"),
+          GRPC_ERROR_STR_TARGET_ADDRESS, grpc_slice_from_copied_string(name));
+      return err;
+    }
+  }
+  grpc_sockaddr_in result;
+  memset(&result, 0, sizeof(result));
+  result.sin_len = sizeof(result);
+  result.sin_family = SCE_NET_AF_INET;
+  result.sin_port = sceNetHtons(port_num);
+  result.sin_addr.s_addr = sin_addr.s_addr;
 
+#else
+  struct addrinfo *resp;
+  int s;
+  size_t i;
+  struct addrinfo* result = nullptr;
   /* Call getaddrinfo */
+  struct addrinfo hints;
   memset(&hints, 0, sizeof(hints));
   hints.ai_family = AF_UNSPEC;     /* ipv4 or ipv6 */
   hints.ai_socktype = SOCK_STREAM; /* stream socket */
@@ -108,28 +194,40 @@ static grpc_error_handle posix_blocking_resolve_address(
         GRPC_ERROR_STR_TARGET_ADDRESS, grpc_slice_from_copied_string(name));
     goto done;
   }
+#endif
 
   /* Success path: set addrs non-NULL, fill it in */
   *addresses = static_cast<grpc_resolved_addresses*>(
       gpr_malloc(sizeof(grpc_resolved_addresses)));
+#if defined(GPR_PLAYSTATION)
+  (*addresses)->naddrs = 1;
+#else
   (*addresses)->naddrs = 0;
   for (resp = result; resp != nullptr; resp = resp->ai_next) {
     (*addresses)->naddrs++;
   }
+#endif
   (*addresses)->addrs = static_cast<grpc_resolved_address*>(
       gpr_malloc(sizeof(grpc_resolved_address) * (*addresses)->naddrs));
+
+#if defined(GPR_PLAYSTATION)
+  memcpy(&(*addresses)->addrs[0].addr, &(result), sizeof(result));
+  (*addresses)->addrs[0].len = sizeof(result);
+#else
   i = 0;
   for (resp = result; resp != nullptr; resp = resp->ai_next) {
     memcpy(&(*addresses)->addrs[i].addr, resp->ai_addr, resp->ai_addrlen);
     (*addresses)->addrs[i].len = resp->ai_addrlen;
     i++;
   }
+#endif
   err = GRPC_ERROR_NONE;
-
+#if !defined(GPR_PLAYSTATION)
 done:
   if (result) {
     freeaddrinfo(result);
   }
+#endif
   return err;
 }
 
diff --git a/src/core/lib/iomgr/sockaddr_posix.h b/src/core/lib/iomgr/sockaddr_posix.h
index 3cedd9082d..320c85b95f 100644
--- a/src/core/lib/iomgr/sockaddr_posix.h
+++ b/src/core/lib/iomgr/sockaddr_posix.h
@@ -25,7 +25,9 @@
 
 #ifdef GRPC_POSIX_SOCKET_SOCKADDR
 #include <arpa/inet.h>
+#if !defined(GPR_PLAYSTATION)
 #include <netdb.h>
+#endif
 #include <netinet/in.h>
 #include <sys/socket.h>
 #include <sys/types.h>
diff --git a/src/core/lib/iomgr/socket_utils_common_posix.cc b/src/core/lib/iomgr/socket_utils_common_posix.cc
index 53df6d6943..951e7858e4 100644
--- a/src/core/lib/iomgr/socket_utils_common_posix.cc
+++ b/src/core/lib/iomgr/socket_utils_common_posix.cc
@@ -69,6 +69,12 @@ grpc_error_handle grpc_set_socket_zerocopy(int fd) {
 
 /* set a socket to non blocking mode */
 grpc_error_handle grpc_set_socket_nonblocking(int fd, int non_blocking) {
+#if defined(GPR_PLAYSTATION)
+  int ret = sceNetSetsockopt(fd, SCE_NET_SOL_SOCKET, SCE_NET_SO_NBIO, &non_blocking, sizeof(non_blocking));
+  if (ret < 0) {
+    return GRPC_OS_ERROR(sce_net_errno, "sceNetSetsockopt(SO_NBIO) failed");
+  }
+#else
   int oldflags = fcntl(fd, F_GETFL, 0);
   if (oldflags < 0) {
     return GRPC_OS_ERROR(errno, "fcntl");
@@ -83,7 +89,7 @@ grpc_error_handle grpc_set_socket_nonblocking(int fd, int non_blocking) {
   if (fcntl(fd, F_SETFL, oldflags) != 0) {
     return GRPC_OS_ERROR(errno, "fcntl");
   }
-
+#endif
   return GRPC_ERROR_NONE;
 }
 
diff --git a/src/core/lib/iomgr/tcp_client_posix.cc b/src/core/lib/iomgr/tcp_client_posix.cc
index 3e8d20a9d8..cd779b93a8 100644
--- a/src/core/lib/iomgr/tcp_client_posix.cc
+++ b/src/core/lib/iomgr/tcp_client_posix.cc
@@ -74,8 +74,10 @@ static grpc_error_handle prepare_socket(const grpc_resolved_address* addr,
 
   err = grpc_set_socket_nonblocking(fd, 1);
   if (err != GRPC_ERROR_NONE) goto error;
+#if !defined(GPR_PLAYSTATION)
   err = grpc_set_socket_cloexec(fd, 1);
   if (err != GRPC_ERROR_NONE) goto error;
+#endif
   if (!grpc_is_unix_socket(addr)) {
     err = grpc_set_socket_low_latency(fd, 1);
     if (err != GRPC_ERROR_NONE) goto error;
@@ -292,9 +294,17 @@ void grpc_tcp_client_create_from_prepared_fd(
     grpc_slice_allocator* slice_allocator) {
   int err;
   do {
+#if defined(GPR_PLAYSTATION)
+    err = sceNetConnect(fd, reinterpret_cast<const SceNetSockaddr*>(addr->addr),
+                        addr->len);
+  } while (err < 0 && sce_net_errno == EINTR);
+  int net_error = sce_net_errno;
+#else
     err = connect(fd, reinterpret_cast<const grpc_sockaddr*>(addr->addr),
                   addr->len);
   } while (err < 0 && errno == EINTR);
+  int net_error = errno;
+#endif
 
   std::string name = absl::StrCat("tcp-client:", grpc_sockaddr_to_uri(addr));
   grpc_fd* fdobj = grpc_fd_create(fd, name.c_str(), true);
@@ -306,9 +316,10 @@ void grpc_tcp_client_create_from_prepared_fd(
     grpc_core::ExecCtx::Run(DEBUG_LOCATION, closure, GRPC_ERROR_NONE);
     return;
   }
-  if (errno != EWOULDBLOCK && errno != EINPROGRESS) {
+
+  if (net_error != EWOULDBLOCK && net_error != EINPROGRESS) {
     grpc_slice_allocator_destroy(slice_allocator);
-    grpc_error_handle error = GRPC_OS_ERROR(errno, "connect");
+    grpc_error_handle error = GRPC_OS_ERROR(net_error, "connect");
     error = grpc_error_set_str(
         error, GRPC_ERROR_STR_TARGET_ADDRESS,
         grpc_slice_from_cpp_string(grpc_sockaddr_to_uri(addr)));
diff --git a/src/core/lib/iomgr/tcp_server_utils_posix_common.cc b/src/core/lib/iomgr/tcp_server_utils_posix_common.cc
index 7501596eca..978f4d811d 100644
--- a/src/core/lib/iomgr/tcp_server_utils_posix_common.cc
+++ b/src/core/lib/iomgr/tcp_server_utils_posix_common.cc
@@ -48,6 +48,9 @@ static int s_max_accept_queue_size;
 
 /* get max listen queue size on linux */
 static void init_max_accept_queue_size(void) {
+#if defined(GPR_PLAYSTATION)
+  s_max_accept_queue_size = 16;
+#else
   int n = SOMAXCONN;
   char buf[64];
   FILE* fp = fopen("/proc/sys/net/core/somaxconn", "r");
@@ -72,6 +75,7 @@ static void init_max_accept_queue_size(void) {
             "connection drops",
             s_max_accept_queue_size);
   }
+#endif
 }
 
 static int get_max_accept_queue_size(void) {
@@ -167,8 +171,10 @@ grpc_error_handle grpc_tcp_server_prepare_socket(
 #endif
   err = grpc_set_socket_nonblocking(fd, 1);
   if (err != GRPC_ERROR_NONE) goto error;
+#if !defined(GPR_PLAYSTATION)
   err = grpc_set_socket_cloexec(fd, 1);
   if (err != GRPC_ERROR_NONE) goto error;
+#endif
   if (!grpc_is_unix_socket(addr)) {
     err = grpc_set_socket_low_latency(fd, 1);
     if (err != GRPC_ERROR_NONE) goto error;
diff --git a/src/core/lib/iomgr/wakeup_fd_pipe.cc b/src/core/lib/iomgr/wakeup_fd_pipe.cc
index e25a944880..76082478ff 100644
--- a/src/core/lib/iomgr/wakeup_fd_pipe.cc
+++ b/src/core/lib/iomgr/wakeup_fd_pipe.cc
@@ -26,19 +26,83 @@
 #include <string.h>
 #include <unistd.h>
 
+#if defined(GPR_PLAYSTATION)
+#include <kernel.h>
+#endif
+
 #include <grpc/support/log.h>
 
 #include "src/core/lib/iomgr/socket_utils_posix.h"
 #include "src/core/lib/iomgr/wakeup_fd_pipe.h"
 #include "src/core/lib/iomgr/wakeup_fd_posix.h"
 
+#if defined(GPR_PLAYSTATION)
+int playstation_create_pipe(int pipefd[2]) {
+  //
+  // https://trac.transmissionbt.com/browser/trunk/libtransmission/trevent.c
+  //
+  pipefd[0] = pipefd[1] = -1;
+
+  SceNetId s = sceNetSocket("pipe", AF_INET, SOCK_STREAM, IPPROTO_TCP);
+  if (s < 0) {
+    return sce_net_errno;
+  }
+
+  SceNetSockaddrIn serv_addr;
+  memset(&serv_addr, 0, sizeof(serv_addr));
+  serv_addr.sin_len = sizeof(serv_addr);
+  serv_addr.sin_family = SCE_NET_AF_INET;
+  serv_addr.sin_port = sceNetHtons(0);
+  serv_addr.sin_addr.s_addr = sceNetHtonl(INADDR_LOOPBACK);
+
+  for (;;) {
+    if (0 != sceNetBind(s, (SceNetSockaddr*)&serv_addr, sizeof(serv_addr))) break;
+    if (0 != sceNetListen(s, 8)) break;
+
+    SceNetSocklen_t server_addr_len = sizeof(serv_addr); 
+    if (0 != sceNetGetsockname(s, (SceNetSockaddr*)&serv_addr, &server_addr_len)) break;
+
+    pipefd[1] = sceNetSocket("pipe_1", AF_INET, SOCK_STREAM, IPPROTO_TCP);
+    if (pipefd[1] < 0) break;
+
+    //if (GRPC_ERROR_NONE != grpc_set_socket_nonblocking(pipefd[1], 1)) break;
+
+    if(0 != sceNetConnect(pipefd[1], (SceNetSockaddr*)&serv_addr, sizeof(serv_addr))) break;
+
+    SceNetSockaddrIn sin_accept;
+    SceNetSocklen_t sin_len = sizeof(sin_accept);
+    pipefd[0] = sceNetAccept(s, (SceNetSockaddr*)&sin_accept, &sin_len);
+    if (pipefd[0] < 0) break;
+
+    //if (GRPC_ERROR_NONE != grpc_set_socket_nonblocking(pipefd[0], 1)) break;
+
+    sceNetSocketClose(s);
+    return 0;
+  }
+  int error_code = sce_net_errno;
+  // error case
+  if (pipefd[0] != -1) sceNetSocketClose(pipefd[0]);
+  if (pipefd[1] != -1) sceNetSocketClose(pipefd[1]);
+  sceNetSocketClose(s);
+  pipefd[0] = pipefd[1] = -1;
+  return error_code;
+}
+#endif
 static grpc_error_handle pipe_init(grpc_wakeup_fd* fd_info) {
   int pipefd[2];
+#if defined(GPR_PLAYSTATION)
+  int r = playstation_create_pipe(pipefd);
+  if (0 != r) {
+    gpr_log(GPR_ERROR, "pipe creation failed (%d)", r);
+    return GRPC_OS_ERROR(r, "pipe");
+  }
+#else
   int r = pipe(pipefd);
   if (0 != r) {
     gpr_log(GPR_ERROR, "pipe creation failed (%d): %s", errno, strerror(errno));
     return GRPC_OS_ERROR(errno, "pipe");
   }
+#endif
   grpc_error_handle err;
   err = grpc_set_socket_nonblocking(pipefd[0], 1);
   if (err != GRPC_ERROR_NONE) return err;
@@ -54,10 +118,18 @@ static grpc_error_handle pipe_consume(grpc_wakeup_fd* fd_info) {
   ssize_t r;
 
   for (;;) {
+#if defined(GPR_PLAYSTATION)
+    r = sceNetRecv(fd_info->read_fd, buf, sizeof(buf), SCE_NET_MSG_DONTWAIT);
+#else
     r = read(fd_info->read_fd, buf, sizeof(buf));
+#endif
     if (r > 0) continue;
     if (r == 0) return GRPC_ERROR_NONE;
+#if defined(GPR_PLAYSTATION)
+    switch (sce_net_errno) {
+#else
     switch (errno) {
+#endif
       case EAGAIN:
         return GRPC_ERROR_NONE;
       case EINTR:
@@ -70,14 +142,24 @@ static grpc_error_handle pipe_consume(grpc_wakeup_fd* fd_info) {
 
 static grpc_error_handle pipe_wakeup(grpc_wakeup_fd* fd_info) {
   char c = 0;
+#if defined(GPR_PLAYSTATION)
+  while (sceNetSend(fd_info->write_fd, &c, 1, SCE_NET_MSG_DONTWAIT) != 1 &&
+         sce_net_errno == EINTR) {
+#else
   while (write(fd_info->write_fd, &c, 1) != 1 && errno == EINTR) {
+#endif
   }
   return GRPC_ERROR_NONE;
 }
 
 static void pipe_destroy(grpc_wakeup_fd* fd_info) {
+#if defined(GPR_PLAYSTATION)
+  if (fd_info->read_fd != 0) sceNetSocketClose(fd_info->read_fd);
+  if (fd_info->write_fd != 0) sceNetSocketClose(fd_info->write_fd);
+#else
   if (fd_info->read_fd != 0) close(fd_info->read_fd);
   if (fd_info->write_fd != 0) close(fd_info->write_fd);
+#endif
 }
 
 static int pipe_check_availability(void) {
diff --git a/third_party/address_sorting/address_sorting_internal.h b/third_party/address_sorting/address_sorting_internal.h
index be59d44fee..662354a122 100644
--- a/third_party/address_sorting/address_sorting_internal.h
+++ b/third_party/address_sorting/address_sorting_internal.h
@@ -56,6 +56,9 @@
 #endif
 #include <arpa/inet.h>
 #include <netinet/in.h>
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <netinet6/in6.h>
+#endif
 #include <sys/socket.h>
 #define ADDRESS_SORTING_POSIX 1
 #endif
