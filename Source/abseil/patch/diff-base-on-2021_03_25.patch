diff --git a/CMake/AbseilHelpers.cmake b/CMake/AbseilHelpers.cmake
index 54fb8df3..1ab01948 100644
--- a/CMake/AbseilHelpers.cmake
+++ b/CMake/AbseilHelpers.cmake
@@ -167,21 +167,6 @@ function(absl_cc_library)
           set(PC_CFLAGS "${PC_CFLAGS} ${cflag}")
         endif()
       endforeach()
-      FILE(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/lib/pkgconfig/absl_${_NAME}.pc" CONTENT "\
-prefix=${CMAKE_INSTALL_PREFIX}\n\
-exec_prefix=\${prefix}\n\
-libdir=\${prefix}/${CMAKE_INSTALL_LIBDIR}\n\
-includedir=\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\n\
-\n\
-Name: absl_${_NAME}\n\
-Description: Abseil ${_NAME} library\n\
-URL: https://abseil.io/\n\
-Version: ${PC_VERSION}\n\
-Requires:${PC_DEPS}\n\
-Libs: -L\${libdir} $<JOIN:${ABSL_CC_LIB_LINKOPTS}, > $<$<NOT:$<BOOL:${ABSL_CC_LIB_IS_INTERFACE}>>:-labsl_${_NAME}>\n\
-Cflags: -I\${includedir}${PC_CFLAGS}\n")
-      INSTALL(FILES "${CMAKE_BINARY_DIR}/lib/pkgconfig/absl_${_NAME}.pc"
-              DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
     endif()
   endif()
 
@@ -224,6 +209,12 @@ Cflags: -I\${includedir}${PC_CFLAGS}\n")
         ${ABSL_CC_LIB_LINKOPTS}
         ${ABSL_DEFAULT_LINKOPTS}
       )
+	  if(WIN32 AND ABSL_ENABLE_INSTALL)
+		install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/absl_${_NAME}.pdb
+			DESTINATION ${CMAKE_INSTALL_LIBDIR}
+			CONFIGURATIONS Debug
+		)
+	  endif()	  
     else()
       message(FATAL_ERROR "Invalid build type: ${_build_type}")
     endif()
diff --git a/CMake/abslConfig.cmake.in b/CMake/abslConfig.cmake.in
index 62d246d0..4edd88c2 100644
--- a/CMake/abslConfig.cmake.in
+++ b/CMake/abslConfig.cmake.in
@@ -1,7 +1,15 @@
 # absl CMake configuration file.
 
 include(CMakeFindDependencyMacro)
-find_dependency(Threads)
+if(__COMPILER_PS4 OR __COMPILER_PS5)
+  set(Threads_FOUND ON)
+  set(CMAKE_USE_PTHREADS_INIT 1)
+  add_library(Threads::Threads INTERFACE IMPORTED)
+  set_property(TARGET Threads::Threads 
+                 PROPERTY INTERFACE_LINK_LIBRARIES "libScePosix_stub_weak.a")
+else()
+  find_dependency(Threads)
+endif()
 
 @PACKAGE_INIT@
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3a73f707..4ba94d90 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -95,7 +95,13 @@ endif()
 
 # find dependencies
 ## pthread
-find_package(Threads REQUIRED)
+if(__COMPILER_PS4 OR __COMPILER_PS5)
+  set(Threads_FOUND ON)
+  set(CMAKE_USE_PTHREADS_INIT 1)
+  add_library(Threads::Threads INTERFACE IMPORTED)
+else()
+  find_package(Threads REQUIRED)
+endif()
 
 option(ABSL_USE_EXTERNAL_GOOGLETEST
   "If ON, Abseil will assume that the targets for GoogleTest are already provided by the including project. This makes sense when Abseil is used with add_subproject." OFF)
@@ -145,20 +151,21 @@ add_subdirectory(absl)
 
 if(ABSL_ENABLE_INSTALL)
   
-
+  set(ABSL_CMAKE_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_CMAKEDIR}")
+  
   # install as a subdirectory only
   install(EXPORT ${PROJECT_NAME}Targets
     NAMESPACE absl::
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
   )
 
   configure_package_config_file(
     CMake/abslConfig.cmake.in
     "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
-    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    INSTALL_DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
   )
   install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
-    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+    DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
   )
 
   # Abseil only has a version in LTS releases.  This mechanism is accomplished
@@ -171,7 +178,7 @@ if(ABSL_ENABLE_INSTALL)
     )
 
     install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
-      DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
+      DESTINATION ${ABSL_CMAKE_INSTALL_PATH}
     )
   endif()  # absl_VERSION
 
diff --git a/absl/CMakeLists.txt b/absl/CMakeLists.txt
index a41e1eeb..93554181 100644
--- a/absl/CMakeLists.txt
+++ b/absl/CMakeLists.txt
@@ -19,7 +19,9 @@ add_subdirectory(algorithm)
 add_subdirectory(cleanup)
 add_subdirectory(container)
 add_subdirectory(debugging)
+if(NOT(__COMPILER_PS4 OR __COMPILER_PS5))
 add_subdirectory(flags)
+endif()
 add_subdirectory(functional)
 add_subdirectory(hash)
 add_subdirectory(memory)
diff --git a/absl/base/CMakeLists.txt b/absl/base/CMakeLists.txt
index 981b8cc0..9bc2f6a4 100644
--- a/absl/base/CMakeLists.txt
+++ b/absl/base/CMakeLists.txt
@@ -573,6 +573,7 @@ absl_cc_test(
     gmock_main
 )
 
+if(NOT(__COMPILER_PS4 OR __COMPILER_PS5))
 absl_cc_library(
   NAME
     scoped_set_env
@@ -598,6 +599,7 @@ absl_cc_test(
     absl::scoped_set_env
     gtest_main
 )
+endif()
 
 absl_cc_test(
   NAME
diff --git a/absl/base/internal/endian.h b/absl/base/internal/endian.h
index dad0e9ae..f1a0c6c0 100644
--- a/absl/base/internal/endian.h
+++ b/absl/base/internal/endian.h
@@ -20,7 +20,11 @@
 #ifdef _MSC_VER
 #include <stdlib.h>  // NOLINT(build/include)
 #elif defined(__FreeBSD__)
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <machine/endian.h>
+#else
 #include <sys/endian.h>
+#endif
 #elif defined(__GLIBC__)
 #include <byteswap.h>  // IWYU pragma: export
 #endif
diff --git a/absl/base/internal/low_level_alloc.cc b/absl/base/internal/low_level_alloc.cc
index 229ab916..f3519a51 100644
--- a/absl/base/internal/low_level_alloc.cc
+++ b/absl/base/internal/low_level_alloc.cc
@@ -35,7 +35,11 @@
 
 #ifndef _WIN32
 #include <pthread.h>
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <sys/signal.h>
+#else
 #include <signal.h>
+#endif
 #include <sys/mman.h>
 #include <unistd.h>
 #else
@@ -85,8 +89,14 @@ struct AllocList {
     // Pointer to parent arena.
     LowLevelAlloc::Arena *arena;
 
+#if defined(__PROSPERO__)
+    // The physical address corresponding to the virtual address start if direct
+    // memory is mapped(PlayStation5 only)
+    off_t sce_off;
+#else
     // Aligns regions to 0 mod 2*sizeof(void*).
     void *dummy_for_alignment;
+#endif
   } header;
 
   // Next two fields: in unallocated blocks: freelist skiplist data
@@ -331,6 +341,8 @@ size_t GetPageSize() {
   return std::max(system_info.dwPageSize, system_info.dwAllocationGranularity);
 #elif defined(__wasm__) || defined(__asmjs__)
   return getpagesize();
+#elif defined(__ORBIS__) || defined(__PROSPERO__)
+  return SCE_KERNEL_PAGE_SIZE;
 #else
   return sysconf(_SC_PAGESIZE);
 #endif
@@ -414,6 +426,15 @@ bool LowLevelAlloc::DeleteArena(Arena *arena) {
     } else {
       munmap_result = base_internal::DirectMunmap(region, size);
     }
+#elif defined(__PROSPERO__)
+    off_t offset = region->header.sce_off;
+    if (offset != 0) {
+      munmap_result = sceKernelMunmap(region, size);
+      ABSL_RAW_CHECK(munmap_result == 0, "sceKernelMunmap failed");
+
+      munmap_result = sceKernelReleaseDirectMemory(offset, size);
+      ABSL_RAW_CHECK(munmap_result == 0, "sceKernelReleaseDirectMemory failed");
+    }
 #else
     munmap_result = munmap(region, size);
 #endif  // ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING
@@ -562,6 +583,18 @@ static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {
         new_pages = mmap(nullptr, new_pages_size, PROT_WRITE | PROT_READ,
                          MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
       }
+#elif defined(__PROSPERO__)
+      off_t off;
+      size_t memalign = 64 * 1024; 
+      int ret = sceKernelAllocateDirectMemory(0, SCE_KERNEL_MAIN_DMEM_SIZE, new_pages_size, memalign, SCE_KERNEL_MTYPE_C_SHARED, &off);
+      if (ret!=0) {
+        return nullptr;
+      }
+      new_pages = nullptr;
+      ret = sceKernelMapDirectMemory(&new_pages, new_pages_size, SCE_KERNEL_PROT_CPU_RW | SCE_KERNEL_PROT_AMPR_RW, 0, off, memalign);
+      if (ret != 0) {
+        return nullptr;
+      }
 #else
       new_pages = mmap(nullptr, new_pages_size, PROT_WRITE | PROT_READ,
                        MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
@@ -577,6 +610,9 @@ static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {
       // Pretend the block is allocated; call AddToFreelist() to free it.
       s->header.magic = Magic(kMagicAllocated, &s->header);
       s->header.arena = arena;
+#if defined(__PROSPERO__)
+      s->header.sce_off = off;
+#endif
       AddToFreelist(&s->levels, arena);  // insert new region into free list
     }
     AllocList *prev[kMaxLevel];
@@ -589,6 +625,9 @@ static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {
       n->header.size = s->header.size - req_rnd;
       n->header.magic = Magic(kMagicAllocated, &n->header);
       n->header.arena = arena;
+#if defined(__PROSPERO__)
+      n->header.sce_off = 0;
+#endif
       s->header.size = req_rnd;
       AddToFreelist(&n->levels, arena);
     }
diff --git a/absl/base/internal/low_level_alloc.h b/absl/base/internal/low_level_alloc.h
index db91951c..2eb1d140 100644
--- a/absl/base/internal/low_level_alloc.h
+++ b/absl/base/internal/low_level_alloc.h
@@ -46,7 +46,7 @@
 // for more information.
 #ifdef ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING
 #error ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING cannot be directly set
-#elif defined(_WIN32) || defined(__asmjs__) || defined(__wasm__)
+#elif defined(_WIN32) || defined(__asmjs__) || defined(__wasm__) || defined(__ORBIS__) || defined(__PROSPERO__)
 #define ABSL_LOW_LEVEL_ALLOC_ASYNC_SIGNAL_SAFE_MISSING 1
 #endif
 
diff --git a/absl/base/internal/raw_logging.cc b/absl/base/internal/raw_logging.cc
index 074e026a..575005c6 100644
--- a/absl/base/internal/raw_logging.cc
+++ b/absl/base/internal/raw_logging.cc
@@ -50,7 +50,7 @@
 // ABSL_HAVE_SYSCALL_WRITE is defined when the platform provides the syscall
 //   syscall(SYS_write, /*int*/ fd, /*char* */ buf, /*size_t*/ len);
 // for low level operations that want to avoid libc.
-#if (defined(__linux__) || defined(__FreeBSD__)) && !defined(__ANDROID__)
+#if (defined(__linux__) || defined(__FreeBSD__)) && !defined(__ANDROID__) && !defined(__ORBIS__) && !defined(__PROSPERO__)
 #include <sys/syscall.h>
 #define ABSL_HAVE_SYSCALL_WRITE 1
 #define ABSL_LOW_LEVEL_WRITE_SUPPORTED 1
diff --git a/absl/base/internal/sysinfo.cc b/absl/base/internal/sysinfo.cc
index 4a3b2050..5279749f 100644
--- a/absl/base/internal/sysinfo.cc
+++ b/absl/base/internal/sysinfo.cc
@@ -30,7 +30,7 @@
 #include <sys/syscall.h>
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) && !defined(__ORBIS__) && !defined(__PROSPERO__)
 #include <sys/sysctl.h>
 #endif
 
diff --git a/absl/base/internal/thread_identity.cc b/absl/base/internal/thread_identity.cc
index 9950e63a..2a97860e 100644
--- a/absl/base/internal/thread_identity.cc
+++ b/absl/base/internal/thread_identity.cc
@@ -16,7 +16,11 @@
 
 #ifndef _WIN32
 #include <pthread.h>
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <sys/signal.h>
+#else
 #include <signal.h>
+#endif 
 #endif
 
 #include <atomic>
@@ -78,7 +82,7 @@ void SetCurrentThreadIdentity(
   absl::call_once(init_thread_identity_key_once, AllocateThreadIdentityKey,
                   reclaimer);
 
-#if defined(__EMSCRIPTEN__) || defined(__MINGW32__)
+#if defined(__EMSCRIPTEN__) || defined(__MINGW32__) || defined(__ORBIS__) || defined(__PROSPERO__)
   // Emscripten and MinGW pthread implementations does not support signals.
   // See https://kripken.github.io/emscripten-site/docs/porting/pthreads.html
   // for more information.
diff --git a/absl/debugging/CMakeLists.txt b/absl/debugging/CMakeLists.txt
index 074b44cf..0a4a6ee4 100644
--- a/absl/debugging/CMakeLists.txt
+++ b/absl/debugging/CMakeLists.txt
@@ -107,6 +107,7 @@ absl_cc_library(
     absl::raw_logging_internal
 )
 
+if(NOT(__COMPILER_PS4 OR __COMPILER_PS5))
 absl_cc_library(
   NAME
     failure_signal_handler
@@ -143,6 +144,7 @@ absl_cc_test(
     Threads::Threads
     gmock
 )
+endif()
 
 absl_cc_library(
   NAME
diff --git a/absl/debugging/failure_signal_handler.cc b/absl/debugging/failure_signal_handler.cc
index 3ddebd74..c173b8d5 100644
--- a/absl/debugging/failure_signal_handler.cc
+++ b/absl/debugging/failure_signal_handler.cc
@@ -36,7 +36,9 @@
 #include <algorithm>
 #include <atomic>
 #include <cerrno>
+#if !defined(__ORBIS__) && !defined(__PROSPERO__)
 #include <csignal>
+#endif
 #include <cstdio>
 #include <cstring>
 #include <ctime>
diff --git a/absl/debugging/internal/examine_stack.cc b/absl/debugging/internal/examine_stack.cc
index 589a3ef3..769dbeab 100644
--- a/absl/debugging/internal/examine_stack.cc
+++ b/absl/debugging/internal/examine_stack.cc
@@ -24,7 +24,9 @@
 #include <sys/ucontext.h>
 #endif
 
+#if !defined(__ORBIS__) && !defined(__PROSPERO__)
 #include <csignal>
+#endif
 #include <cstdio>
 
 #include "absl/base/attributes.h"
diff --git a/absl/time/internal/cctz/src/time_zone_format.cc b/absl/time/internal/cctz/src/time_zone_format.cc
index d8cb0474..cb3ecf15 100644
--- a/absl/time/internal/cctz/src/time_zone_format.cc
+++ b/absl/time/internal/cctz/src/time_zone_format.cc
@@ -13,8 +13,8 @@
 //   limitations under the License.
 
 #if !defined(HAS_STRPTIME)
-#if !defined(_MSC_VER) && !defined(__MINGW32__)
-#define HAS_STRPTIME 1  // assume everyone has strptime() except windows
+#if !defined(_MSC_VER) && !defined(__MINGW32__) && !defined(__ORBIS__) && !defined(__PROSPERO__)
+#define HAS_STRPTIME 1  // assume everyone has strptime() except windows and playstation
 #endif
 #endif
 
@@ -40,7 +40,7 @@
 #include <limits>
 #include <string>
 #include <vector>
-#if !HAS_STRPTIME
+#if !defined(HAS_STRPTIME)
 #include <iomanip>
 #include <sstream>
 #endif
@@ -56,7 +56,7 @@ namespace detail {
 
 namespace {
 
-#if !HAS_STRPTIME
+#if !defined(HAS_STRPTIME)
 // Build a strptime() using C++11's std::get_time().
 char* strptime(const char* s, const char* fmt, std::tm* tm) {
   std::istringstream input(s);
diff --git a/absl/time/internal/cctz/src/time_zone_info.cc b/absl/time/internal/cctz/src/time_zone_info.cc
index 8039353e..e4b974bb 100644
--- a/absl/time/internal/cctz/src/time_zone_info.cc
+++ b/absl/time/internal/cctz/src/time_zone_info.cc
@@ -631,7 +631,7 @@ std::unique_ptr<ZoneInfoSource> FileZoneInfoSource::Open(
     char* tzdir_env = nullptr;
 #if defined(_MSC_VER)
     _dupenv_s(&tzdir_env, nullptr, "TZDIR");
-#else
+#elif !defined(__ORBIS__) && !defined(__PROSPERO__)
     tzdir_env = std::getenv("TZDIR");
 #endif
     if (tzdir_env && *tzdir_env) tzdir = tzdir_env;
diff --git a/absl/time/internal/cctz/src/time_zone_libc.cc b/absl/time/internal/cctz/src/time_zone_libc.cc
index 887dd097..06b5a63e 100644
--- a/absl/time/internal/cctz/src/time_zone_libc.cc
+++ b/absl/time/internal/cctz/src/time_zone_libc.cc
@@ -23,6 +23,10 @@
 #include <limits>
 #include <utility>
 
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <rtc.h>
+#endif
+
 #include "absl/base/config.h"
 #include "absl/time/internal/cctz/include/cctz/civil_time.h"
 #include "absl/time/internal/cctz/include/cctz/time_zone.h"
@@ -71,6 +75,24 @@ auto tm_zone(const std::tm& tm) -> decltype(tzname[0]) {
   const bool is_dst = tm.tm_isdst > 0;
   return tzname[is_dst];
 }
+#elif defined(__ORBIS__) || defined(__PROSPERO__)
+int tm_gmtoff(const std::tm& /*tm*/) {
+  SceRtcTick utcTick;
+  sceRtcGetCurrentTickUtc(&utcTick);
+  SceRtcTick localTick;
+  sceRtcConvertUtcToLocalTime(&utcTick, &localTick);
+  int32_t timeZoneOffset =
+      (int32_t)(((int64_t)(utcTick.tick) - (int64_t)(localTick.tick)) /
+                1000000ll);
+  return timeZoneOffset;
+}
+
+const char* tm_zone(const std::tm& /*tm*/) {
+    //TODO: how to get playstation current local zone name?
+    static char local_zone_name[] = "LOCAL";
+    return local_zone_name;
+}
+
 #else
 // Adapt to different spellings of the struct std::tm extension fields.
 #if defined(tm_gmtoff)
@@ -112,6 +134,8 @@ auto tm_zone(const T& tm) -> decltype(tm.__tm_zone) {
 inline std::tm* gm_time(const std::time_t* timep, std::tm* result) {
 #if defined(_WIN32) || defined(_WIN64)
   return gmtime_s(result, timep) ? nullptr : result;
+#elif defined(__ORBIS__) || defined(__PROSPERO__)
+  return gmtime_s(timep, result) ? nullptr : result;
 #else
   return gmtime_r(timep, result);
 #endif
@@ -120,6 +144,8 @@ inline std::tm* gm_time(const std::time_t* timep, std::tm* result) {
 inline std::tm* local_time(const std::time_t* timep, std::tm* result) {
 #if defined(_WIN32) || defined(_WIN64)
   return localtime_s(result, timep) ? nullptr : result;
+#elif defined(__ORBIS__) || defined(__PROSPERO__)
+  return localtime_s(timep, result) ? nullptr : result;
 #else
   return localtime_r(timep, result);
 #endif
diff --git a/absl/time/internal/cctz/src/time_zone_lookup.cc b/absl/time/internal/cctz/src/time_zone_lookup.cc
index efdea64b..a15ce331 100644
--- a/absl/time/internal/cctz/src/time_zone_lookup.cc
+++ b/absl/time/internal/cctz/src/time_zone_lookup.cc
@@ -145,7 +145,7 @@ time_zone local_time_zone() {
   char* tz_env = nullptr;
 #if defined(_MSC_VER)
   _dupenv_s(&tz_env, nullptr, "TZ");
-#else
+#elif !defined(__ORBIS__) && !defined(__PROSPERO__)
   tz_env = std::getenv("TZ");
 #endif
   if (tz_env) zone = tz_env;
@@ -160,7 +160,7 @@ time_zone local_time_zone() {
 #if defined(_MSC_VER)
     // System-specific default is just "localtime".
     _dupenv_s(&localtime_env, nullptr, "LOCALTIME");
-#else
+#elif !defined(__ORBIS__) && !defined(__PROSPERO__)
     zone = "/etc/localtime";  // System-specific default.
     localtime_env = std::getenv("LOCALTIME");
 #endif
